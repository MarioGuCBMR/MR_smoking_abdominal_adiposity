library(PtProcess)
library(ggplot2)
library(gtable)
library(grid)
library(gridExtra)
library(data.table)
library(tidyverse)

whr_path = "J:/CBMR/SUN-CBMR-Kilpelainen-Group/Team projects/German&Mario&MariaJose/data/grs_output/fat_lifetime_whr_grs_res_weighted.txt"
whradjbmi_path = "J:/CBMR/SUN-CBMR-Kilpelainen-Group/Team projects/German&Mario&MariaJose/data/grs_output/fat_lifetime_whradjbmi_grs_res_weighted.txt"
title1 = "Lifetime smoking-WHR GRS"
title2 = "Lifetime smoking-WHRadjBMI GRS"
level1 = "VAT"
level2 = "VATadjBMI"
level3 = "GSAT"
level4 = "GSATadjBMI"
level5 = "ASAT"
level6 = "ASATadjBMI"
level7 = "VAT/GSAT"
level8 = "VAT/ASAT"
level9 = "ASAT/GSAT"
main_title = "Lifetime smoking-abdominal adiposity genetic scores"
output_path = "J:/CBMR/SUN-CBMR-Kilpelainen-Group/Team projects/German&Mario&MariaJose/plots/fat_depots.tiff"

whr_w_grs_df <- fread(whr_path)
whradjbmi_w_grs_df <- fread(whradjbmi_path)

whr_w_grs_df$GRS <- title1
whradjbmi_w_grs_df$GRS <- title2

#Let's make the nsnps a bit different:

whr_w_grs_df$nsnps <- paste("n=", whr_w_grs_df$nsnps, sep = "")
whradjbmi_w_grs_df$nsnps <- paste("n=", whradjbmi_w_grs_df$nsnps, sep = "")

#Let's make those plots!!

grs_df <- rbind(whr_w_grs_df, whradjbmi_w_grs_df)

# Keeping adjBMI and non-adj with respect to the trait
# If the trait is adjuested, WHRadjusted (otherwise unadjusted)
subset_dfadjBMI <- grs_df[grepl("adjBMI", grs_df$trait) & grepl("adjBMI", grs_df$GRS), ]
subset_df <- grs_df[!grepl("adjBMI", grs_df$trait) & !grepl("adjBMI", grs_df$GRS), ]
grs_df <- rbind(subset_df, subset_dfadjBMI)

#Now that they are merged, let's do the following:

#Now that they are merged, let's add the full effects, but let's be careful.
#Because some of the 0.10 transform to 0.1

betas_rounded <- ifelse(nchar(round(grs_df$beta, 2)) == 3, paste(round(grs_df$beta, 2), "0", sep=""), round(grs_df$beta, 2))
lower_ci_rounded <- ifelse(nchar(round(grs_df$lower_ci, 2)) == 3, paste(round(grs_df$lower_ci, 2), "0", sep=""), round(grs_df$lower_ci, 2))
upper_ci_rounded <- ifelse(nchar(round(grs_df$upper_ci, 2)) == 3, paste(round(grs_df$upper_ci, 2), "0", sep=""), round(grs_df$upper_ci, 2))

grs_df$full_effect <- paste(betas_rounded,
                            " (",
                            lower_ci_rounded,
                            ",",
                            upper_ci_rounded,
                            ")",
                            sep=""
)

#STEP 0: let's transform in factors the traits that we columns that we need:

grs_df$Trait <- factor(grs_df$trait, levels = c(level1, level2, level3, level4, level5, level6, level7, level8, level9))

grs_df$type <- c("Fat depot","Fat depot","Fat depot", "Fat depot","Fat depot","Fat depot", "Ratio","Ratio","Ratio", "Fat depot","Fat depot","Fat depot", "Fat depot","Fat depot","Fat depot", "Ratio","Ratio","Ratio")
grs_df$type = factor(grs_df$type, levels=c("Fat depot", "Ratio"))

grs_df$GRS = factor(grs_df$GRS, levels=c(title1, title2))



plotio <-
  
  #SETTING the info where we are all gonna work
  
  ggplot(grs_df, aes(x= fct_rev(Trait),y = as.numeric(beta), ymin=-0.4, ymax=0.7, color = Trait, shape=GRS)) +
  # ggplot(grs_df, aes(x= fct_rev(Trait),y = as.numeric(beta), ymin=min(grs_df$lower_ci - 0.1), ymax=max(grs_df$upper_ci + 0.1), color = Trait, shape=GRS)) +
  
  #Generating geom_point:
  
  geom_point(aes(color = Trait, shape=GRS, fill=Trait), size = 4,  position = position_dodge(width = 0.75)) +
  scale_shape_manual(name= "GRS", values=c("Lifetime smoking-WHRadjBMI GRS" = 15, "Lifetime smoking-WHR GRS" = 15)) +
  scale_y_continuous(breaks = scales::pretty_breaks(n = 5))+
  # scale_y_continuous(breaks = scales::pretty_breaks(n = 9))
  #Adding the error bars:
  
  geom_errorbar(aes(ymin=as.numeric(lower_ci), ymax=as.numeric(upper_ci)), width = 0.15, cex= 1, position = position_dodge(width = 0.75), color="black", size=1) +
  
  #Generating a facet to distribute the data beautifully:
  
  # facet_wrap(~type, strip.position="left", nrow=7, scales = "free_y") +
  geom_hline(yintercept = 0, color = "red", size = 0.5, linetype=2) +
  
  #First geom_text:
  
  #geom_text(aes(label=grs_df$nsnps),
  #          color = "black", position = position_dodge(width = 0.75), vjust = 1.6, size=3.5) +
  
  #Second geom_text:
  geom_text(aes(label=as.character(grs_df$full_effect)),
            color = "black", position = position_dodge(width = 0.75), vjust =-1.25, size=3.5) +
  
  # geom_text(aes(label=as.character(grs_df$full_effect)),
  #           color = "black", position = geom_text(aes(label=as.character(grs_df$full_effect)),
  #           color = "black", position = position_dodge(width = 0.75), hjust=-0.70, vjust =0.60, size=3.5) +
  
  coord_flip() +
  
  
  #SETTING AXIS OPTIONS:
  
  xlab("") +
  ylab("effect sizes") +
  
  #SETTING TITLE OPTIONS:
  
  ggtitle(paste0(main_title)) +
  theme_bw() +
  # theme(axis.title.y=element_blank(),
  #       axis.text.y=element_blank(),
  #       axis.ticks.y=element_blank()) +
  theme(legend.position="none") +
  #theme(legend.text=element_text(size=11)) +
  # theme(strip.background = element_rect(colour="black", fill="white")) +
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(), axis.line = element_line(colour = "black"))+
  theme(axis.text=element_text(size=11), axis.title=element_text(size=10,face="bold"), plot.title = element_text(size = 12, face = "bold", hjust=0.5))

tiff(output_path, width = 4500, height=6000, res = 500)
plotio
dev.off()


